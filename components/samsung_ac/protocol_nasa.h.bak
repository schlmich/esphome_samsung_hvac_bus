#pragma once

#include <vector>
#include "protocol.h"

namespace esphome
{
    namespace samsung_ac
    {
        enum class AddressClass : uint8_t
        {
            Outdoor = 0x10,
            HTU = 0x11,
            Indoor = 0x20,
            ERV = 0x30,
            Diffuser = 0x35,
            MCU = 0x38,
            RMC = 0x40,
            WiredRemote = 0x50,
            PIM = 0x58,
            SIM = 0x59,
            Peak = 0x5A,
            PowerDivider = 0x5B,
            OnOffController = 0x60,
            WiFiKit = 0x62,
            CentralController = 0x65,
            DMS = 0x6A,
            JIGTester = 0x80,
            BroadcastSelfLayer = 0xB0,
            BroadcastControlLayer = 0xB1,
            BroadcastSetLayer = 0xB2,
            BroadcastControlAndSetLayer = 0xB3,
            BroadcastModuleLayer = 0xB4,
            BroadcastCSM = 0xB7,
            BroadcastLocalLayer = 0xB8,
            BroadcastCSML = 0xBF,
            Undefined = 0xFF,
        };

        enum class PacketType : uint8_t
        {
            StandBy = 0,
            Normal = 1,
            Gathering = 2,
            Install = 3,
            Download = 4
        };

        enum class DataType : uint8_t
        {
            Undefined = 0,
            Read = 1,
            Write = 2,
            Request = 3,
            Notification = 4,
            Response = 5,
            Ack = 6,
            Nack = 7
        };

        enum MessageSetType : uint8_t
        {
            Enum = 0,
            Variable = 1,
            LongVariable = 2,
            Structure = 3
        };

        enum class MessageNumber : uint16_t
        {
            Undefiend = 0,
            ENUM_in_operation_power = 0x4000,
            ENUM_in_operation_automatic_cleaning = 0x4111,
            ENUM_in_water_heater_power = 0x4065,
            ENUM_in_operation_mode = 0x4001,
            ENUM_in_water_heater_mode = 0x4066,
            ENUM_in_fan_mode = 0x4006, // Did not exists in xml...only in Remocon.dll code
            ENUM_in_fan_mode_real = 0x4007,
            ENUM_in_alt_mode = 0x4060,
            ENUM_in_louver_hl_swing = 0x4011,
            ENUM_in_louver_lr_swing = 0x407e,
            ENUM_in_state_humidity_percent = 0x4038,
            VAR_in_temp_room_f = 0x4203,
            VAR_in_temp_target_f = 0x4201,
            VAR_in_temp_water_outlet_target_f = 0x4247,
            VAR_in_temp_water_tank_f = 0x4237,
            VAR_out_sensor_airout = 0x8204,
            VAR_in_temp_water_heater_target_f = 0x4235,
            VAR_in_temp_eva_in_f = 0x4205,
            VAR_in_temp_eva_out_f = 0x4206,
            VAR_out_error_code = 0x8235,
            LVAR_OUT_CONTROL_WATTMETER_1W_1MIN_SUM = 0x8413,
            LVAR_OUT_CONTROL_WATTMETER_ALL_UNIT_ACCUM = 0x8414,
            VAR_OUT_SENSOR_CT1 = 0x8217,
            LVAR_NM_OUT_SENSOR_VOLTAGE = 0x24fc,


VAR_xx_NASA_ERROR_CODE1 = 0x202,
VAR_xx_NUMBER OF INDOOR UNITS CONNECTED = 0x207,
ENUM_xx_NASA_STANDBY_MODE = 0x23,
VAR_LONG_xx_NASA_ALL_LAYER_DEVICE_COUNT = 0x2400,
ENUM_xx_INDOOR UNIT CURRENT OPERATION MODE = 0x4002,
ENUM_xx_NASA_USE_CENTUAL_CONTROL = 0x401b,
VAR_LONG_xx_NASA_RMCADDRESS = 0x402,
ENUM_xx _NASA_USE_SPI = 0x4023,
ENUM_xx_NASA_USE_FILTER_WARNING_TIME = 0x4024,
ENUM_xx_NASA_FILTER_WARNING = 0x4027,
ENUM_xx_THERMO ON/OFF = 0x4028,
ENUM_xx_NASA_INDOOR_DEFROST_STATUS = 0x402e,
ENUM_xx_NASA_USE_MDS = 0x403e,
ENUM_xx_NASA_CONTROL_MDS = 0x403f,
ENUM_xx_NASA_CONTROL_SPI = 0x4043,
ENUM_xx_NASA_USE_SILENCE = 0x4045,
ENUM_xx_NASA_CONTROL_SILENCE = 0x4046,
VAR_LONG_xx_NASA_ALL_REMOTE_LEVEL = 0x409,
VAR_LONG_xx_NASA_LEVEL_POWER = 0x40a,
VAR_LONG_xx_NASA_LEVEL_OPMODE = 0x40b,
ENUM_xx_NASA_VACANCY_STATUS = 0x40bc,
ENUM_xx_NASA_USE_VACANCY_STATUS = 0x40bd,
VAR_LONG_xx_NASA_LEVEL_FANSPEED = 0x40c,
VAR_LONG_xx_NASA_LEVEL_AIRSWING = 0x40d,
ENUM_xx__ENTER_ROOM_CONTROL_USED = 0x40d5,
VAR_LONG_xx_NASA_LEVEL_SETTEMP = 0x40e,
VAR_LONG_xx_NASA_LEVEL_OPMODE_LIMIT = 0x410,
VAR_LONG_xx_NASA_LEVEL_COOL_HIGH_TEMP_LIMIT = 0x411,
VAR_LONG_xx_NASA_LEVEL_COOL_LOW_TEMP_LIMIT = 0x412,
VAR_LONG_xx_NASA_LEVEL_HEAT_HIGH_TEMP_LIMIT = 0x413,
VAR_LONG_xx_NASA_LEVEL_HEAT_LOW_TEMP_LIMIT = 0x414,
VAR_LONG_xx_NASA_LEVEL_OUT_POINT_INPUT = 0x415,
VAR_LONG_xx_NASA_LEVEL_KEY_INPUT = 0x416,
VAR_xx_NASA_MODIFIED_CURRENT_TEMP = 0x4204,
VAR_xx_NASA_INDOOR_ABSOLUTE_CAPACITY = 0x4212,
VAR_xx_NASA_INDOOR_MODEL_INFORMATION = 0x4229,
VAR_LONG_xx_NASA_ERROR_INOUT = 0x440f,
VAR_LONG_xx_NASA_VACANCY_SETTING = 0x4418,
VAR_LONG_xx_LVAR_IN_ENTER_ROOM_CONTROL_DATA = 0x441b,
VAR_LONG_xx_LVAR_IN_ETO_COOL_CONTROL_DATA = 0x441f,
VAR_LONG_xx_LVAR_IN_ETO_HEAT_CONTROL_DATA = 0x4420,
VAR_LONG_xx_MINUTES_SINCE_INSTALLATION = 0x4423,
VAR_LONG_xx_MINUTES_ACTIVE = 0x4424,
ENUM_xx_INDOOR_UNIT_DEFROST_OPERATION_STEPS = 0x8000,
ENUM_xx_COMP1_ON_OFF = 0x8010,
ENUM_xx_NASA_OUTDOOR_OD_EEV_VALVE = 0x8020,
ENUM_xx_NASA_OUTDOOR_TEST_OP_COMPLETE = 0x8046,
ENUM_xx_NASA_OUTDOOR_SERVICEOPERATION = 0x8047,
ENUM_xx_NASA_OUTDOOR_INDOOR_DEFROST_STEP = 0x8061,
ENUM_xx_NASA_OUTDOOR_OPMODELIMIT = 0x8066,
ENUM_xx_NASA_OUTDOOR_EXT_CMD_OPERATION = 0x8081,
ENUM_xx_REFRIGERANT_AMOUNT_LEVEL = 0x808e,
ENUM_xx_NASA_OUTDOOR_COOLONLY_MODEL = 0x809d,
ENUM_xx_NASA_OUTDOOR_DRED_LEVEL = 0x80a7,
ENUM_xx_NASA_OUTDOOR_BASE_HEATER = 0x80af,
ENUM_xx_NASA_OUTDOOR_CH_SWITCH_VALUE = 0x80b2,
VAR_xx_NASA_OUTDOOR_OPMODE_OPTION = 0x8200,
VAR_xx_NUMBER_OF_OUTDOOR_UNIT_COMPRESSORS = 0x8202,
VAR_xx_NASA_OUTDOOR_DISCHARGE_TEMP1 = 0x820a,
VAR_xx_COMPRESSOR_1_CURRENT = 0x8217,
VAR_xx_MAIN_HEAT_EXCHANGER_OUTLET_TEMPERATURE = 0x8218,
VAR_xx_SUCTION_TEMPERATURE = 0x821a,
VAR_xx_TARGET_DISCHARGE_TEMPERATURE = 0x8223,
VAR_xx_MAIN_EEV1 = 0x8229,
VAR_xx_MAIN_EEV2 = 0x822a,
VAR_xx_MAIN_EEV3 = 0x822b,
VAR_xx_MAIN_EEV4 = 0x822c,
VAR_xx_MAIN_EEV5 = 0x822d,
VAR_xx_NASA_OUTDOOR_OPERATION_CAPA_SUM  = 0x8233,
VAR_xx_NASA_OUTDOOR_COMP1_ORDER_HZ = 0x8236,
VAR_xx_NASA_OUTDOOR_COMP1_TARGET_HZ = 0x8237,
VAR_xx_NASA_OUTDOOR_COMP1_RUN_HZ = 0x8238,
VAR_xx_DC_LINK1_INVERTER_VOLTAGE_INPUT = 0x823b,
VAR_xx_NASA_OUTDOOR_FAN_RPM1 = 0x823d,
VAR_xx_NASA_OUTDOOR_FAN_RPM2 = 0x823e,
VAR_xx_NASA_OUTDOOR_CONTROL_PRIME_UNIT = 0x823f,
VAR_xx_NASA_OUTDOOR_DEFROST_STEP = 0x8247,
VAR_xx_NASA_OUTDOOR_SAFETY_START = 0x8248,
VAR_xx_REFRIGERANT_AMOUNT = 0x824f,
VAR_xx_IPM1_TEMPERATURE = 0x8254,
VAR_xx_VAR_OUT_SENSOR_PIPEIN1 = 0x825f,
VAR_xx_VAR_OUT_SENSOR_PIPEIN2 = 0x8260,
VAR_xx_NASA_OUTDOOR_HP = 0x8287,
VAR_LONG_xx_NASA_OUTDOOR_COMP1_RUNNING_TIME = 0x8405,
VAR_LONG_xx_NASA_OUTDOOR_COMP2_RUNNING_TIME = 0x8406,
VAR_LONG_xx_INSTANTANEOUS_POWER_CONSUMPTION = 0x8411

         

        };

        struct Address
        {
            AddressClass klass;
            uint8_t channel;
            uint8_t address;
            uint8_t size = 3;

            static Address parse(const std::string &str);
            static Address get_my_address();

            void decode(std::vector<uint8_t> &data, unsigned int index);
            void encode(std::vector<uint8_t> &data);
            std::string to_string();
        };

        struct Command
        {
            bool packetInformation = true;
            uint8_t protocolVersion = 2;
            uint8_t retryCount = 0;
            PacketType packetType = PacketType::StandBy;
            DataType dataType = DataType::Undefined;
            uint8_t packetNumber = 0;

            uint8_t size = 3;

            void decode(std::vector<uint8_t> &data, unsigned int index);
            void encode(std::vector<uint8_t> &data);
            std::string to_string();
        };

        struct Buffer
        {
            uint8_t size;
            uint8_t data[255];
        };

        struct MessageSet
        {
            MessageNumber messageNumber = MessageNumber::Undefiend;
            MessageSetType type = Enum;
            union
            {
                long value;
                Buffer structure;
            };
            uint16_t size = 2;

            MessageSet(MessageNumber messageNumber)
            {
                this->messageNumber = messageNumber;
                // this->deviceType = (NMessageSet.DeviceType) (((int) messageNumber & 57344) >> 13);
                this->type = (MessageSetType)(((uint32_t)messageNumber & 1536) >> 9);
                // this->_msgIndex = (ushort) ((uint) messageNumber & 511U);
            }

            static MessageSet decode(std::vector<uint8_t> &data, unsigned int index, int capacity);

            void encode(std::vector<uint8_t> &data);
            std::string to_string();
        };

        struct Packet
        {
            Address sa;
            Address da;
            Command command;
            std::vector<MessageSet> messages;

            static Packet create(Address da, DataType dataType, MessageNumber messageNumber, int value);
            static Packet createa_partial(Address da, DataType dataType);

            DecodeResult decode(std::vector<uint8_t> &data);
            std::vector<uint8_t> encode();
            std::string to_string();
        };

        DecodeResult try_decode_nasa_packet(std::vector<uint8_t> data);
        void process_nasa_packet(MessageTarget *target);

        class NasaProtocol : public Protocol
        {
        public:
            NasaProtocol() = default;

            void publish_request(MessageTarget *target, const std::string &address, ProtocolRequest &request) override;
            void protocol_update(MessageTarget *target) override;
        };

    } // namespace samsung_ac
} // namespace esphome
